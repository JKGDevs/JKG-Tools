_G holds global environment, setfenv changes environments
_VERSION current interpreter version "Lua 5.0"
assert (v [, message]) error if v nil or false, otherwise returns v
cmds.Add(command, func) Binds the function to that command
cmds.Remove(command) Unbinds the command
cmds.AddRcon(command, func) Binds the function to that command (rcon)
cmds.RemoveRcon(command) Unbinds the command (rcon)
collectgarbage ([limit]) set threshold to limit KBytes, default 0, may run GC
coroutine.create (f) creates coroutine from function f, returns coroutine
coroutine.resume (co, val1, ...) continues execution of co, returns bool status plus any values
coroutine.status (co) returns co status. "running", "suspended" or "dead"
coroutine.wrap (f) creates coroutine with body f, returns function that resumes co
coroutine.yield (val1, ...) suspend execution of calling coroutine
debug.debug () enters interactive debug mode, line with only "cont" terminates
debug.gethook () returns current hook function, hook mask, hook count
debug.getinfo (function [, what]) returns table with information about a function
debug.getlocal (level, local) returns name and value of local variable with index local at stack level
debug.getupvalue (func, up) returns name and value of upvalue with index up of function func
debug.sethook (hook, mask [, count]) sets given function as a hook, mask="[crl]"
debug.setlocal (level, local, value) sets local variable with index local at stack level with value
debug.setupvalue (func, up, value) sets upvalue with index up of function func with value
debug.traceback ([message]) returns a string with a traceback of the call stack
dofile (filename) executes as Lua chunk, default stdin, returns value
ents.GetByIndex (index)
ents.GetAll ()
ents.GetByClass (class)
ents.GetByClassI (class)
ents.GetByName (name)
ents.GetByNameI (name)
error (message [, level]) terminates protected func, never returns, level 1 (default), 2=parent
file.Read(file:string):string Returns contents of a file
file.Write(file:string, buffer:string):nil Writes to a file
file.Exists(file:string):boolean Checks if a file exists
file.ListFiles(path:string, extension:string:string_table Returns a string table listing all of the files in a directory (from PK3s)
gcinfo () returns dynamic mem in use (KB), and current GC threshold (KB)
getfenv (f) gets env, f can be a function or number (stack level, default=1), 0=global env
getmetatable (object) returns metatable of given object, otherwise nil
hook.Add(hookname, uniqueid, func, [priority]) Hooks the function to the specified event. uniqueid is used to avoid duplicate bindings
hook.Remove(hookname, uniqueid) Removes the specified hook
io.close ([file]) closes file, or the default output file
io.flush () flushes the default output file
io.input ([file]) opens file in text mode, sets as default input file, or returns current default input file
io.lines ([filename]) open file in read mode, returns iterator function to return lines, nil ends
io.open (filename [, mode]) opens file in specified mode "[rawb+]", returns handle or nil
io.output ([file]) opens file in text mode, sets as default output file, or returns current default output file
io.read (format1, ...) reads file according to given formats, returns read values or nil
io.stderr file descriptor for STDERR
io.stdin file descriptor for STDIN
io.stdout file descriptor for STDOUT 
io.tmpfile () returns a handle for a temporary file, opened in update mode
io.type (obj) returns "file" if obj is an open file handle, "close file" if closed, or nil if not a file handle
io.write (value1, ...) writes strings or numbers to file
ipairs (t) returns an iterator function, table t and 0
json.RegisterFile(fileName) Loads a JSON file (and returns the root node index)
json.GetObjectItem(node, desiredNodeName) Retrieves a child node index of the node
json.Clear() When we are done with a file, call this to clean stuff up.
json.GetFirstObject(node) Returns first child node index of a node
json.GetNextObject(node) Returns handle to next JSON object
json.IsNumber(node) Returns true if the node is a number
json.IsObject(node) Returns true if the node is an object
json.IsBoolean(node) Returns true if the node is a boolean
json.ToString(node) Returns a string version of the node's value
json.ToNumber(node) Returns a number version of the node's value
json.ToInteger(node) Returns an integer version of the node's value
json.ToBoolean(node) Returns a boolean version of the node's value
json.ToStringOpt(node, optvalue) Returns a string version of the node's value (or optvalue if not found)
json.ToNumberOpt(node, optvalue) Returns a number version of the node's value (or optvalue if not found)
json.ToIntegerOpt(node, optvalue) Returns an integer version of the node's value (or optvalue if not found)
json.ToBooleanOpt(node, optvalue) Returns a boolean version of the node's value (or optvalue if not found)
json.GetArraySize(node) Returns number of elements in an array node
json.GetArrayItem(node, elementnum) Returns handle to JSON object in array
json.RegisterStream(maxdepth, formatted) Starts a stream for writing JSON
json.FinishStream(filename) Finishes the current stream
json.BeginObject(object) Writes an object. If the object handle is 0, then we will pass NULL
json.EndObject() Ends the highest-scope object
json.BeginArray(object) Same as json.BeginObject, but treats the value as an array
json.WriteString(key, value) Writes a string object. key can be "0" for NULL (arrays)
json.WriteInteger(key, value) Writes an integer object. key can be "0" for NULL (arrays)
json.WriteNumber(key, value) Writes a number object. key can be "0" for NULL (arrays)
json.WriteBoolean(key, value) Writes a boolean objecet. key can be "0" for NULL (arrays)
loadfile (filename) loads chunk without execution, returns chunk as function, else nil plus error
loadlib (libname, funcname) links to dynamic library libname, returns funcname as a C function
loadstring (string [, chunkname]) loads string as chunk, returns chunk as function, else nil plus error
log (...) prints to log. Args are concatenated strings. 
math.abs (v) returns absolute value of v
math.acos (v) returns arc cosine value of v in radians
math.asin (v) returns arc sine value of v in radians
math.atan (v) returns arc tangent value of v in radians
math.atan2 (v1, v2) returns arc tangent value of v1/v2 in radians
math.ceil (v) returns smallest integer >= v
math.cos (rad) returns cosine value of angle rad
math.deg (rad) returns angle in degrees of radians rad
math.exp (v) returns e^v
math.floor (v) returns largest integer <= v
math.frexp (v) returns mantissa [0.5,1) and exponent values of v
math.ldexp (v1, v2) returns v1*2^v2
math.log (v) returns natural logarithm of v
math.log10 (v) returns logarithm 10 of v
math.max (v1, ...) returns maximum in a list of one or more values
math.min (v1, ...) returns minimum in a list of one or more values
math.mod (v1, v2) returns remainder of v1/v2 which is v1 - iV2 for some integer i
math.pow (v1, v2) returns v1 raised to the power of v2
math.rad (deg) returns angle in radians of degrees deg
math.random ([n [, u]]) returns random real [0,1), integer [1,n] or real [1,u] (with n=1)
math.randomseed (seed) sets seed for pseudo-random number generator
math.sin (rad) returns sine value of angle rad 
math.sqrt (v) returns square root of v
math.tan (rad) returns tangent value of angle rad  
next (table [, index]) returns next index,value pair, if index=nil (default), returns first index
pairs (t) returns the next function and table t plus a nil, iterates over all key-value pairs
pcall (f, arg1, arg2, ...) protected mode call, catches errors, returns status code first (true=success)
players.GetByID(ID:number):player/nil Returns player based on the specified client ID
players.GetByName(name:string):player/nil Returns the player with the specified name (or nil if not found)
players.GetAll():table Returns a table with all players
print (e1, e2, ...) prints values to console using tostring
printnn (...) print to console without adding a newline
PrintTable(table) Displays the contents of the specified table in the console
rawequal (v1, v2) non-metamethod v1==v2, returns boolean
rawget (table, index) non-metamethod get value of table[index], index != nil
rawset (table, index, value) non-metamethod set value of table[index], index != nil
require (packagename) loads package, updates _LOADED, returns boolean
securitylog (...) Prints to the security log.
setfenv (f, table) sets env, f can be a function or number (stack level, default=1), 0=global env
setmetatable (table, metatable) sets metatable, nil to remove metatable
string.byte (s [, i]) returns numerical code, nil if index out of range, default i=1
string.char (i1, i2, ...) returns a string built from 0 or more integers
string.dump (function) returns binary representation of function, used with loadstring
string.find (s, pattern [, init [, plain]]) matches pattern in s, returns start,end indices, else nil
string.format (formatstring, e1, e2, ...) returns formatted string, printf-style
string.gfind (s, pat) returns iterator function that returns next captures from pattern pat on s
string.gsub (s, pat, repl [, n]) returns copy of s with pat replaced by repl, and substitutions made
string.len (s) returns string length
string.lower (s) returns string with letters in lower case
string.rep (s, n) returns string with n copies of string s
string.sub (s, i [, j]) returns substring from index i to j of s, default j=-1 (string length)
string.upper (s) returns string with letters in upper case
sys.GetCvarString(cvarname) Returns string value of specified cvar
sys.GetCvarInt(cvarname) Returns int value of specified cvar
sys.GetCvarFloat(cvarname) Returns float value of specified cvar
sys.SetCvar(cvarname, value) Sets cvar to the specified value
sys.SetCS(ID, value) Sets configstring <ID> to the specified value
sys.GetCS(ID) Returns string value of a configstring <ID>
sys.Time() Returns current server time (level.time)
sys.Milliseconds() Returns amount of milliseconds elapsed since server started
sys.Command(command) Executes the specified command
sys.RemapShader(original, new) Replaces one shader <original> with another <new>
sys.EffectIndex(effect) Returns the effect ID for an effect name
sys.PlayEffect(id, origin[, angles]) Plays the specified effect
sys.RadiusDamage(origin, [attacker,] damage, radius, ignore, missile, meansofdeath) Does radius damage
sys.PlaySound(origin, sound, channel) Plays sound effect
sys.PlaySoundIdx(origin, soundid, channel) Plays sound effect, given a sound id
sys.SoundIndex(sound) Returns sound ID of specified sound
sys.WeaponClipSize(weapon) Returns clipsize of the specified weapon
sys.AmmoLimit(ammotype) Returns the ammo limit of an ammotype
sys.MapName() Returns the BSP name of the current map
sys.SpotWouldTelefrag(ent, location) Returns whether or not teleporting the ent to location would cause a telefrag
sys.StripColorcodes(text) Returns the passed string with colorcodes removed
table.concat (table [, sep [, i [, j]]]) returns concatenated table elements i to j separated by sep
table.foreach (table, f) executes f(index,value) over all elements of table, returns first non-nil of f
table.foreachi (table, f) executes f(index,value) in sequential order 1 to n, returns first non-nil of f
table.getn (table) returns size of table, or n field, or table.setn value, or 1 less first index with nil value
table.insert (table, [pos,] value) insert value at location pos in table, default pos=n+1
table.remove (table [, pos]) removes element at pos from table, default pos=n
table.setn (table, n) sets size of table, n field of table if it exists
table.sort (table [, comp]) sorts in-place elements 1 to n, comp(v1,v2) true if v1<v2, default <
tonumber (e [, base]) convert to number, returns number, nil if non-convertible, 2<=base<=36
tostring (e) convert to string, returns string
type (v) returns type of v as a string
unpack (list) returns all elements from list
xpcall (f, err) pcall function f with new error handler err
print (msg) Displays msg in the console
include (file) includes a file
Vector(x:number, y:number, z:number):vector Constructs a vector
